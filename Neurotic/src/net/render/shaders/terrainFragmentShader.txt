#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;
 
out vec4 out_Color;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gdTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(void){

	vec4 blendMapColor = texture(blendMap,pass_textureCoords);
	float backTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
	vec2 tiledCoords = pass_textureCoords * 40.0;
	vec4 backgroundTextureColor = texture(backgroundTexture, tiledCoords) * backTextureAmount;
	

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);

	float nDot1 = dot(unitNormal,unitLightVector);
	float brightness = max(nDot1,0.2);
	vec3 diffuse = brightness * lightColor;

	vec3 lightDirection = -unitLightVector;
	vec3 unitCameraVector = normalize(toCameraVector);
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
	
	float specFactor = dot(reflectedLightDirection,unitCameraVector);
	specFactor = max(specFactor,0.0);
	float dampedFactor = pow(specFactor,shineDamper);
	vec3 finalSpec = dampedFactor *reflectivity* lightColor;

	vec4 textureColor = texture(textureSampler,pass_textureCoords);
	if(textureColor.a <0.5){
		discard;
	}

	out_Color = vec4(diffuse,1.0) * textureColor +vec4(finalSpec,1.0);
	out_Color = mix(vec4(skyColor,1.0),out_Color,visibility);

}